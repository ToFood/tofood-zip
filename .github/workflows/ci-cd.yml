name: CI/CD Workflow

on:
  # Executa somente em commits para a branch main
  push:
    branches:
      - main
  # Executa somente em pull requests direcionados à branch main
  pull_request:
    branches:
      - main


env:
  DOTNET_VERSION: ${{ vars.DOTNET_VERSION }}
  DEVEXPRESS_TOKEN: ${{ vars.DEVEXPRESS_TOKEN }}
  DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REGISTRY: docker.io

jobs:


  # Job de configuração do ambiente com todas as exceções necessárias
  setup-environment:
    name: 🌐 Configure Environment
    runs-on: ubuntu-latest
    steps:
      - name: Configure DevExpress Feed
        run: |
          dotnet nuget add source https://nuget.devexpress.com/api -n DXFeed -u DevExpress -p $DEVEXPRESS_TOKEN --store-password-in-clear-text


  # Verifica as vunerabilidades da Aplicação
  #security-vulnerability:


  # Irá fazer um build completo da solução para verificar se o projeto está rodando normalmente
  build:
    name: 🛠️ Build Solution
    runs-on: ubuntu-latest
    needs: [setup-environment]


    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Dependencies
        run: dotnet restore

      - name: Build Project
        run: dotnet build --no-restore --configuration Release


  # Job de análise (analyze) que irá verificar as regras referente a padronização e qualidade de código
  code-quality:
    name: 🎨 Code Quality
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

  # Teste unitário e isolado de um método especifico
  unitary-test:
    name: 🧪 Unitary Test
    runs-on: ubuntu-latest
    needs: [code-quality]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
   

  # Teste de APIs - Conexões entre serviços
  integration-test:
    name: ⚗️ Integration Test
    runs-on: ubuntu-latest
    needs: [code-quality]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
  # Teste Completos de funcionalidades
  system-test:
    name: 🔬 System Test
    runs-on: ubuntu-latest
    needs: [code-quality]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

  api-dockers:
    name: 🐋 -> 🌐 ${{ matrix.service.name }}
    runs-on: ubuntu-latest
    needs: [unitary-test, integration-test, system-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Fazer checkout do repositório
        uses: actions/checkout@v2
    

  service-dockers:
    name: 🐋 -> 🤖 Services
    runs-on: ubuntu-latest
    needs: [unitary-test, integration-test, system-test]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Fazer checkout do repositório
        uses: actions/checkout@v2

  queue-dockers:
    name: 🐋 -> 🐇 Queues
    runs-on: ubuntu-latest
    needs: [unitary-test, integration-test, system-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Fazer checkout do repositório
        uses: actions/checkout@v2


  deploy:
    name: 🐋 -> 🐇 Queues
    runs-on: ubuntu-latest
    needs: [queue-dockers, service-dockers]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Fazer checkout do repositório
        uses: actions/checkout@v2
