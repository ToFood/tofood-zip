name: CI/CD Workflow

on:
  # Executa somente em commits para a branch main
  push:
    branches:
      - main
  # Executa somente em pull requests direcionados à branch main
  pull_request:
    branches:
      - main

env:
  DOTNET_VERSION: ${{ vars.DOTNET_VERSION }}
  DEVEXPRESS_TOKEN: ${{ vars.DEVEXPRESS_TOKEN }}
  DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REGISTRY: docker.io
  AWS_REPOSITORY_URI: ${{ secrets.AWS_REPOSITORY_URI }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ROLE_ARN: ${{ secrets.ROLE_ARN }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  AWS_CREDENTIALS_JSON: ${{ secrets.AWS_CREDENTIALS_JSON }}

jobs:
  # Verifica as vunerabilidades da Aplicação
  #security-vulnerability:

  # Irá fazer um build completo da solução para verificar se o projeto está rodando normalmente
  build:
    name: 🛠️ Build Solution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Install Dependencies
        run: dotnet restore

      - name: Build Project
        run: dotnet build --no-restore --configuration Release

  # Job de análise (analyze) que irá verificar as regras referente a padronização e qualidade de código
  code-quality:
    name: 🎨 Code Quality
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

  # Teste unitário e isolado de um método especifico
  unitary-test:
    name: 🧪 Unitary Test
    runs-on: ubuntu-latest
    needs: [code-quality]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

  # Teste de APIs - Conexões entre serviços
  integration-test:
    name: ⚗️ Integration Test
    runs-on: ubuntu-latest
    needs: [code-quality]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

  # Teste Completos de funcionalidades
  system-test:
    name: 🔬 System Test
    runs-on: ubuntu-latest
    needs: [code-quality]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
  configure-aws-credential:
    name: 🐋 -> 🌐 APIs
    runs-on: ubuntu-latest
    needs: [unitary-test, integration-test, system-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

  deploy-image:
    name: 🐋 -> 🌐 APIs
    runs-on: ubuntu-latest
    needs: [unitary-test, integration-test, system-test, configure-aws-credential]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Fazer checkout do repositório
        uses: actions/checkout@v3
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: tofood-zip
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-project:
    runs-on: ubuntu-latest
    needs: [unitary-test, integration-test, system-test, deploy-image, configure-aws-credential]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: tofood-zip
          IMAGE_TAG: latest
          AWS_SecretManager: ${{ secrets.AWS_SecretManager }}
          AWS_AccessKey: ${{ secrets.AWS_AccessKey }}
          AWS_SecretKey: ${{ secrets.AWS_SecretKey }}
          AWS_Region: ${{ secrets.AWS_Region }}
          ASPNETCORE_HTTP_PORTS: ${{ secrets.ASPNETCORE_HTTP_PORTS }}
        run: |
          echo "$SSH_PRIVATE_KEY" > key.pem
          chmod 400 key.pem
          ssh -i key.pem -o StrictHostKeyChecking=no ubuntu@$EC2_HOST "
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker stop app || true
            docker rm app || true
            docker run -d --name app -e AWS__SecretManager=${{ secrets.AWS_SecretManager }} -e AWS__AccessKey=${{ secrets.AWS_AccessKey }} -e AWS__SecretKey=${{ secrets.AWS_SecretKey }} -e AWS__Region=${{ secrets.AWS_Region }} -e ASPNETCORE_HTTP_PORTS=${{ secrets.ASPNETCORE_HTTP_PORTS }} -p 9090:9090 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          "
